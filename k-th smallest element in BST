Given a BST and an integer K. Find the Kth Smallest element in the BST using O(1) extra space. 

Example 1:

Input:
      2
    /   \
   1     3
K = 2
Output: 2
Explanation: 2 is the 2nd smallest element in the BST



class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def kthSmallest(root, K):
    count = 0
    kth_smallest = None

    current = root
    while current is not None:
        if current.left is None:
            count += 1
            if count == K:
                kth_smallest = current.val
            current = current.right
        else:
            pre = current.left
            while pre.right is not None and pre.right != current:
                pre = pre.right

            if pre.right is None:
                pre.right = current
                current = current.left
            else:
                pre.right = None
                count += 1
                if count == K:
                    kth_smallest = current.val
                current = current.right

    return kth_smallest

# Example usage
root = TreeNode(2)
root.left = TreeNode(1)
root.right = TreeNode(3)
K = 2
result = kthSmallest(root, K)
print(result)
